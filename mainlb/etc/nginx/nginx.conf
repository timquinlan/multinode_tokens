user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log info;
pid        /var/run/nginx.pid;

# Load Modules
load_module /usr/lib/nginx/modules/ngx_http_js_module.so; # NGINX Javascript

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$request_id"';

    # NGINX Plus Additional NGINX Metrics
    log_format  main_ext  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" "$http2" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$host" sn="$server_name" '
                      'rt=$request_time '
                      'ua="$upstream_addr" us="$upstream_status" '
                      'ut="$upstream_response_time" ul="$upstream_response_length" '
                      'cs=$upstream_cache_status $request_id' ;

    # access_log  /var/log/nginx/access.log  main; # Default
    access_log  /var/log/nginx/access.log  main_ext; # NGINX Plus Additional NGINX Metrics

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;
    resolver 127.0.0.11 ipv6=off; # Docker DNS


    upstream app_upstreams {
        server proxy1:80 max_fails=1 fail_timeout=1s;
        server proxy2:80 max_fails=1 fail_timeout=1s;
        keepalive 32;
    }


server {
    listen 80 default_server;
    server_name _;

    location / {
        proxy_pass http://app_upstreams;
        #proxy_set_header X-Original-URI $request_uri;
	#proxy_set_header Host $host;
        #proxy_set_header Remote-User $remote_user;
	proxy_pass_request_headers on;
    }

    location /api {
        api write=on;
        allow 172.0.0.0/8; #allow connections from within docker network
        deny all;
    }

}


# TCP/UDP proxy and load balancing block
#
#stream {
    # Example configuration for TCP load balancing

    #upstream stream_backend {
    #    zone tcp_servers 64k;
    #    server backend1.example.com:12345;
    #    server backend2.example.com:12345;
    #}

    #server {
    #    listen 12345;
    #    status_zone tcp_server;
    #    proxy_pass stream_backend;
    #}
#}
}

# vim: syntax=nginx
